import json
import pygame
import os
import logging
from .tile import Tile
from .map import GameMap
from lib.map.tileset import TileSet

logger = logging.getLogger(__name__)


class TiledMapParser:
    tile_set = None

    """
    Parses the map file generated by Tiled
    """

    def __init__(self, layers, **kwargs):
        """
        :param layers: path to the map file generated by Tiled
        """

        self.path = layers
        self.props = kwargs

    def _parse_layer(self, layer, tile_size):
        tiles = []
        id = layer["id"]
        x, y = layer["x"], layer["y"]
        for i, tile_id in enumerate(layer["data"]):
            props = self.tile_set.get_tile(tile_id)
            tiles.append(Tile(tile_id, (x + i % layer["width"] * tile_size[0], y + i // layer["width"] * tile_size[1]),
                              tile_size, id, **props, **self.props))
        return tiles

    def parse(self, resolution=(800, 800)):
        map_layers = []
        with open(self.path) as file:
            layers = json.load(file)
            tile_size = resolution[0] // layers["width"], resolution[1] // layers["height"]
            self.tile_set = TileSet(os.path.join(os.path.dirname(self.path), layers["tilesets"][0]["source"]),
                                    tile_size, **self.props)

        for layer in layers["layers"]:
            if layer["type"] == "tilelayer" and layer["visible"]:
                map_layers.append(self._parse_layer(layer, tile_size))

        background = pygame.Surface(resolution)
        background.fill(self.props.get('color', 'white'))
        layers["background"] = background
        layers["layers"] = map_layers
        return GameMap(**self.props, **layers)
